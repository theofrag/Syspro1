ΦΡΑΓΚΟΥΛΗΣ ΘΕΟΔΩΡΟΣ - sdi1900207

Δομή project:
•	Στον φάκελο includes/ υπάρχουν τα .h αρχεία με τους ορισμούς των συναρτήσεων και ένα αρχείο common.h που είναι header files που γίνονται συχνά include
•	Στον φάκελο modules υπάρχουν τα επιμέρους .cpp αρχεία του προγράμματος, εκτός του sniffer.cpp

Compilation & run:
•	Υπάρχει makefile που υποστηρίζει separate compilation.
•	Με εντολή make run τρέχει το εκτελέσιμο
•	Η make clean καθαρίζει επίσης το .out αρχεία του φακέλου που γίνεται το output αν αυτά υπάρχουν και αν ο φάκελος υπάρχει.



Στην αρχή της main δημιουργείται ένα unnamed pipe που θα χρησιμοποιηθεί για την επικοινωνία των manager-listener

-----Listener------  

Για να δημιουργηθεί ένας listener ο manager καλεί την fork() στην αρχή της main. 
Ο listener κλείνει το READ end του unnamed pipe και συνδέει το stdout με το WRITE end του pipe καλώντας την dup2(). 
Τέλος καλεί την execl() ώστε να εκτελέσει την inotifywait με τα κατάλληλα ορίσματα.

-----Manager----- 


Αρχικά ο manager κλείνει το WRITE end του pipe για την επικοινωνία του με τον listener. 
Ύστερα μπαίνει σε ένα loop όπου διαβάζει από το pipe ονόματα αρχείων που του στέλνει ο listener. 
Κάθε όνομα αρχείου τελειώνει με ‘/n’. Μέσα στο pipe μπορεί να υπάρχουν ταυτόχρονα πολλά ονόματα αρχείων. 
Όταν ο manager διαβάσει από το pipe καλεί την strtok() με όρισμα ‘/n’ ώστε να ξεχωρίσει τα ονόματα των αρχείων. 
Υπάρχει περίπτωση το read να διακοπεί από κάποιο σήμα με αποτέλεσμα να μην στείλει ολόκληρο το όνομα κάποιου αρχείου.
Σε περίπτωση που συμβεί αυτό τα υπόλοιπα bytes του ονόματος του αρχείου διαβάζονται byte προς byte μέχρι να ολοκληρωθεί το διάβασμα ολόκληρου του ονόματος του.
Στην συνέχεια ο manager ελέγχει αν υπάρχει διαθέσιμος worker για το αρχείο. Αν δεν υπάρχει δημιουργεί κάποιον worker. 
Σε περίπτωση που είναι η πρώτη φορά εκτέλεσης του προγράμματος θα δημιουργηθούν τόσοι workers όσοι και τα αρχεία που θα διαβαστούν ότι υπάρχουν στον κατάλογο. 
Για τον σκοπό αυτό υπάρχει η Boolean μεταβλητή firstTime που τίθεται σε true στην αρχή εκτέλεσης του προγράμματος.
Η δημιουργία των workers γίνεται με κλήση της fork(). Αμέσως μετά δημιουργείται ένα named pipe μεταξύ του worker και του manager. 
Το όνομα του named pipe αποτελείται από το pid του manager και το pid του worker. 
Για παράδειγμα αν το pid του manager είναι 1234 και το pid του worker είναι 5678 τότε το όνομα του named pipe είναι 12345678. 
Κάθε named pipe μπαίνει στον φάκελο pipes/ που πρέπει να υπάρχει πριν την εκτέλεση του προγράμματος.
Αν υπάρχει διαθέσιμος worker ο manager στέλνει σήμα SIGCONT ώστε ο worker να βγει από την κατάσταση stopped.
Μόλις σταλεί το SIGCONT στον worker, θα σταλεί ένα σήμα SIGCHDL στην γονική διεργασία. 
Έχει οριστεί κατάλληλος signal handler ώστε ο πατέρας να αφαιρέσει τον worker από την ουρά των διαθέσιμων workers.

-----Worker-----


Ο worker διαβάζει από το named pipe το όνομα του αρχείου που θα επεξεργαστεί. 
Γνωρίζει ποιο pipe να διαβάσει αφού διαβάζει από το pipe με όνομα το pid του πατέρα του και το pid του.
 Ύστερα καλεί την workerFunc() η οποία διαβάζει από το pipe το όνομα του αρχείου και καλεί με την σειρά της την findUrls(). 
Σκοπός της findUrls() είναι να διαβάσει το αρχείο και να βρει τα urls και το πλήθος των εμφανίσεων τους. 
Ύστερα γράφει αυτές τις πληροφορίες σε ένα αρχείο στον φάκελο outs/.
Όταν ο worker τελειώσει με το αρχείο βάζει τον εαυτό του σε κατάσταση STOPPED. 
Με το σήμα SIGSTOP στέλνεται ένα σήμα SIGCHDL στην γονική διεργασία. Ο signal handler του SIGCHDL βάζει τον worker στην ουρά με τους διαθέσιμους workers.


Σημείωση: Μερικές μεταβλητές έχουν οριστεί σε global scope ώστε να μπορεί να γίνει free της μνήμης τους σε περίπτωση απότομης διακοπής της εκτέλεσης του προγράμματος.
